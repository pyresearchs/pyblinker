from typing import Optional
import matplotlib.pyplot as plt
import numpy as np
import mne
from mne.report import Report

from ..utils._logging import logger


def generate_blink_report(
    epochs: mne.Epochs,
    *,
    ch_name: Optional[str] = None,
    padding: int = 10,
) -> Report:
    """Create a report visualising detected blinks for each epoch.

    Parameters
    ----------
    epochs : mne.Epochs
        Epochs object containing blink metadata generated by
        :func:`find_blinks_epoch`.
    ch_name : str | None
        Channel to plot. The first channel is used when ``None``.
    padding : int
        Number of samples to include before blink onset and after blink end.

    Returns
    -------
    mne.report.Report
        Report with blink plots grouped by epoch index.
    """
    logger.info("Creating blink report")
    if epochs.metadata is None:
        raise ValueError("epochs.metadata must contain blink information")

    if ch_name is None:
        ch_idx = 0
        ch_name = epochs.ch_names[0]
    else:
        ch_idx = epochs.ch_names.index(ch_name)

    sfreq = epochs.info["sfreq"]
    data = epochs.get_data(picks=ch_idx)
    if data.ndim == 3:
        data = data[:, 0, :]

    report = Report(title="Blink Report")
    for ep_idx, row in epochs.metadata.iterrows():
        onsets = row["blink_onsets"]
        durations = row["blink_durations"]
        for blink_idx, (onset, dur) in enumerate(zip(onsets, durations)):
            start = max(0, int(onset * sfreq) - padding)
            end = min(data.shape[-1], int((onset + dur) * sfreq) + padding)
            segment = data[ep_idx, start:end]
            times = np.arange(start, end) / sfreq
            fig, ax = plt.subplots(figsize=(6, 3))
            ax.plot(times, segment)
            ax.axvline(int(onset * sfreq) / sfreq, color="r", linestyle="--",
                       label="blink start")
            ax.axvline(int((onset + dur) * sfreq) / sfreq, color="r", linestyle="--",
                       label="blink end")
            ax.set_xlabel("Time (s)")
            ax.set_ylabel(ch_name)
            ax.set_title(f"Epoch {ep_idx} Blink {blink_idx}")
            ax.legend()
            report.add_figure(fig, title=f"Epoch {ep_idx} Blink {blink_idx}",
                              section=f"Epoch {ep_idx}")
            plt.close(fig)
    logger.info("Blink report created")
    return report
